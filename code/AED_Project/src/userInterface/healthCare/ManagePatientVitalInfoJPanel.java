/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.healthCare;

import business.Enterprise.Enterprise;
import business.Organization.Community.DoctorOrganization;
import business.Organization.Organization;
import business.UserAccount.UserAccount;
import business.WorkQueue.PersonalHealthIssueWorkRequest;
import business.patient.Patient;
import business.patient.VitalSignHistory;
import business.patient.VitalSignInfo;
import java.awt.CardLayout;
import java.awt.Component;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ilanigam17
 */
public class ManagePatientVitalInfoJPanel extends javax.swing.JPanel {

    private Patient patient;
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private UserAccount account;

    /**
     * Creates new form AddVitalInfoJPanel
     */
    public ManagePatientVitalInfoJPanel(UserAccount account, Enterprise enterprise, Patient patient, JPanel userProcessContainer) {
        initComponents();
        this.patient = patient;
        this.enterprise = enterprise;
        this.account = account;
        this.userProcessContainer = userProcessContainer;
        createSensorData();
        InfoPanel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        respRateJTextField = new javax.swing.JTextField();
        heartRateJTextField = new javax.swing.JTextField();
        sysBPJTextField = new javax.swing.JTextField();
        weightJTextField = new javax.swing.JTextField();
        AddVitalInfoJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        InfoPanel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Vital Information");

        jLabel2.setText("Respiratory Rate");

        jLabel3.setText("Heart Rate");

        jLabel4.setText("Systolic Blood Pressure");

        jLabel5.setText("Weight(In pounds)");

        respRateJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateJTextFieldActionPerformed(evt);
            }
        });

        weightJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightJTextFieldActionPerformed(evt);
            }
        });

        AddVitalInfoJButton.setText("ADD vital Information");
        AddVitalInfoJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddVitalInfoJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Time Stamp");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jLabel9.setText("Sensor ID");

        InfoPanel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        InfoPanel.setForeground(new java.awt.Color(0, 0, 204));
        InfoPanel.setText("INFORMATION:Your vitals seems abnormal today,Your report has been sent to doctor for analysis!");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel9))
                                .addGap(97, 97, 97)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(heartRateJTextField)
                                    .addComponent(respRateJTextField)
                                    .addComponent(sysBPJTextField)
                                    .addComponent(weightJTextField)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(AddVitalInfoJButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(backJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(respRateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(heartRateJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(sysBPJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(weightJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddVitalInfoJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(backJButton)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void weightJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_weightJTextFieldActionPerformed

    public void addVitalInfoRequest() {
        if (null != patient.getId()) {

            String errMsg;
            errMsg = validateVitalInfo();
            if (errMsg.toString().isEmpty()) {

                String status = deriveStatus(createPatientVitalInfo());

                JOptionPane.showMessageDialog(null, "Vital Information added Successfully!", "Congratulations!", JOptionPane.INFORMATION_MESSAGE);
                resetInfo();
                if (!status.isEmpty() && status.equalsIgnoreCase("Abnormal")) {
                    sendAbnormalWorkRequest();
                }
            } else {
                JOptionPane.showMessageDialog(null, errMsg.toString(), "Abort!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please create patient record first!", "Abort!", JOptionPane.INFORMATION_MESSAGE);
            resetInfo();
        }
    }

    public void sendAbnormalWorkRequest() {
        PersonalHealthIssueWorkRequest newRequest = new PersonalHealthIssueWorkRequest();
        newRequest.setMessage("Abnormal VitalSigns");
        // newRequest.setUploadList(" ");
        newRequest.setIssueDetails("Please check Vital Signs History, and kindly provide suggestions to improve health");
        newRequest.setSender(this.account);
        newRequest.setRequestDate(new Date());
        newRequest.setStatus("Sent");
        newRequest.setResolveDate(null);
        newRequest.setCheckedNotification(false);
        if ((this.account).getPerson().getPatient() != null) {
            VitalSignHistory vsh = (this.account).getPerson().getPatient().getVitalHistory();
            VitalSignInfo lastVitalInfo = vsh.getVitalHistory().get(vsh.getVitalHistory().size() - 1);
            newRequest.setLatestVital(lastVitalInfo);
        }
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                org = organization;
                break;
            }
        }

        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(newRequest);
            account.getWorkQueue().getWorkRequestList().add(newRequest);
        }
       // JOptionPane.showMessageDialog(null, "Successfully added request!");
InfoPanel.setVisible(true);
    }

    public String deriveStatus(VitalSignInfo vi) {
        String status = "Abnormal";
        float respRate = vi.getRespRate();
        float heartRate = vi.getHeartRate();
        float sbp = vi.getSystolicBP();
        float weight = vi.getWeight();
        int age = patient.getAge();
        if (age > 0 && age <= 3) {
            if ((respRate >= 20 && respRate <= 30) && (heartRate >= 80 && heartRate <= 130) && (sbp >= 80 && sbp <= 110) && (weight >= 22 && weight <= 31)) {
                status = "Normal";
            }
        }
        if (age >= 4 && age <= 5) {
            if ((respRate >= 20 && respRate <= 30) && (heartRate >= 80 && heartRate <= 120) && (sbp >= 80 && sbp <= 110) && (weight >= 31 && weight <= 40)) {
                status = "Normal";
            }
        }
        if (age >= 6 && age <= 12) {
            if ((respRate >= 20 && respRate <= 30) && (heartRate >= 70 && heartRate <= 110) && (sbp >= 80 && sbp <= 120) && (weight >= 41 && weight <= 92)) {
                status = "Normal";
            }
        }
        if (age > 12) {
            if ((respRate >= 12 && respRate <= 20) && (heartRate >= 55 && heartRate <= 105) && (sbp >= 110 && sbp <= 120) && (weight > 110)) {
                status = "Normal";
            }
        }

        return status;
    }

    public void createSensorData() {
        Random randomNum = new Random();
        respRateJTextField.setText(String.valueOf(randomNum.nextInt(100) + 50));
        heartRateJTextField.setText(String.valueOf(randomNum.nextInt(100) + 50));
        sysBPJTextField.setText(String.valueOf(randomNum.nextInt(100) + 50));
        weightJTextField.setText(String.valueOf(randomNum.nextInt(100) + 50));
        DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        Date dateobj = new Date();

        jLabel7.setText(df.format(dateobj));
        jLabel8.setText(String.valueOf(randomNum.nextInt(900) + 1000));

    }

    public VitalSignInfo createPatientVitalInfo() {
        VitalSignInfo vi = patient.getVitalHistory().addVitalInfo();
        vi.setRespRate(Float.parseFloat(respRateJTextField.getText().trim()));
        vi.setHeartRate(Float.parseFloat(heartRateJTextField.getText().trim()));
        vi.setSystolicBP(Float.parseFloat(sysBPJTextField.getText().trim()));
        vi.setWeight(Float.parseFloat(weightJTextField.getText().trim()));
        vi.setCurrentTime(jLabel7.getText());
        vi.setSensorId(jLabel8.getText());
        return vi;
    }

    public String validateVitalInfo() {
        String errMsg = "";
        if (respRateJTextField.getText().isEmpty()) {
            errMsg = "Respiratory rate is manadatory\n";
        } else if (!(respRateJTextField.getText().trim()).matches("[0-9.]*")) {
            errMsg = "Respiratory rate is not a valid input\n";
        }
        if (heartRateJTextField.getText().isEmpty()) {
            errMsg = errMsg + "Heart rate is manadatory\n";
        } else if (!(heartRateJTextField.getText().trim()).matches("[0-9.]*")) {
            errMsg = errMsg + "Heart rate is not a valid input\n";
        }
        if (sysBPJTextField.getText().isEmpty()) {
            errMsg = errMsg + "Systolic blood pressure is manadatory\n";
        } else if (!(sysBPJTextField.getText().trim()).matches("[0-9.]*")) {
            errMsg = errMsg + "Systolic blood pressure is not a valid input\n";
        }
        if (weightJTextField.getText().isEmpty()) {
            errMsg = errMsg + "Weight is manadatory\n";
        } else if (!(weightJTextField.getText().trim()).matches("[0-9.]*")) {
            errMsg = errMsg + "Weight rate is not a valid input\n";
        }

        return errMsg;
    }
    private void respRateJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respRateJTextFieldActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        try {
            Component compoArray[] = userProcessContainer.getComponents();
            ManagePatientJPanel managePatientJPanel = (ManagePatientJPanel) compoArray[compoArray.length - 1];
            managePatientJPanel.populateRec();
        } catch (Exception e) {
       //     System.err.println(e);
        }
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void AddVitalInfoJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddVitalInfoJButtonActionPerformed
        addVitalInfoRequest();
    }//GEN-LAST:event_AddVitalInfoJButtonActionPerformed

    public void resetInfo() {
        respRateJTextField.setText("");
        heartRateJTextField.setText("");
        sysBPJTextField.setText("");
        weightJTextField.setText("");
        jLabel7.setText("");
        jLabel8.setText("");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddVitalInfoJButton;
    private javax.swing.JLabel InfoPanel;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField heartRateJTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField respRateJTextField;
    private javax.swing.JTextField sysBPJTextField;
    private javax.swing.JTextField weightJTextField;
    // End of variables declaration//GEN-END:variables
}
